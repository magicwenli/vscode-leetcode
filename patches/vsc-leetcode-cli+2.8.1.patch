diff --git a/node_modules/vsc-leetcode-cli/lib/core.js b/node_modules/vsc-leetcode-cli/lib/core.js
index c9df632..3fa3d66 100644
--- a/node_modules/vsc-leetcode-cli/lib/core.js
+++ b/node_modules/vsc-leetcode-cli/lib/core.js
@@ -119,6 +119,8 @@ core.exportProblem = function(problem, opts) {
   data.comment = h.langToCommentStyle(data.lang);
   data.percent = data.percent.toFixed(2);
   data.testcase = util.inspect(data.testcase || '');
+  data.extra_pre = h.langToExtraPre(data.lang);
+  data.extra_post = h.langToExtraPost(data.lang);
 
   if (opts.tpl === 'detailed') {
     let desc = data.desc;
diff --git a/node_modules/vsc-leetcode-cli/lib/helper.js b/node_modules/vsc-leetcode-cli/lib/helper.js
index 9c5ff43..dcd9f99 100644
--- a/node_modules/vsc-leetcode-cli/lib/helper.js
+++ b/node_modules/vsc-leetcode-cli/lib/helper.js
@@ -140,6 +140,65 @@ h.langToCommentStyle = function(lang) {
     {start: res.style,  line: res.style,  end: res.style, singleLine: res.style};
 };
 
+h.langToExtraPre = function(lang) {
+  const res = LANGS.find(x => x.lang === lang);
+  if(!res) return '';
+  if (res.lang === 'java') return 'import java.util.*;\n';
+  if (res.lang === 'rust') return `
+struct Solution;
+fn main() {}
+
+#[derive(PartialEq, Eq, Clone, Debug)]
+pub struct ListNode {
+    pub val: i32,
+    pub next: Option<Box<ListNode>>,
+}
+
+impl ListNode {
+    #[inline]
+    fn new(val: i32) -> Self {
+        ListNode { next: None, val }
+    }
+}
+
+macro_rules! list_node {
+    () => {None};
+    ($($e:expr), *) => {
+        {
+            // create a template head
+            let mut temp_head = Box::new(ListNode::new(0));
+            // use ref_head as a mutable reference to the last node
+            let mut _ref_head = &mut temp_head;
+            $(
+                // append a new node to the last node
+                _ref_head.next = Some(Box::new(ListNode::new($e)));
+                _ref_head = _ref_head.next.as_mut().unwrap();
+            )*
+            // return the head of the list (skip the template head)
+            Some(temp_head.next.unwrap())
+        }
+    };
+}
+`;
+  return '';
+};
+
+h.langToExtraPost = function(lang) {
+  const res = LANGS.find(x => x.lang === lang);
+  if(!res) return '';
+  if (res.lang === 'java') return 'class Solution {}';
+  if (res.lang === 'rust') return `
+#[cfg(test)]
+mod tests {
+    use super::*;
+
+    #[test]
+    fn test() {}
+}
+`;
+  return '';
+};
+
 h.readStdin = function(cb) {
   const stdin = process.stdin;
   const bufs = [];
diff --git a/node_modules/vsc-leetcode-cli/templates/codeonly.tpl b/node_modules/vsc-leetcode-cli/templates/codeonly.tpl
index ae5b54a..5aec1c5 100644
--- a/node_modules/vsc-leetcode-cli/templates/codeonly.tpl
+++ b/node_modules/vsc-leetcode-cli/templates/codeonly.tpl
@@ -4,6 +4,10 @@ ${comment.line}
 ${comment.line} [${fid}] ${name}
 ${comment.end}
 
+${extra_pre}
+
 ${comment.singleLine} @lc code=start
 ${code}
 ${comment.singleLine} @lc code=end
+
+${extra_post}
diff --git a/node_modules/vsc-leetcode-cli/templates/detailed.tpl b/node_modules/vsc-leetcode-cli/templates/detailed.tpl
index 7329a7d..58154aa 100644
--- a/node_modules/vsc-leetcode-cli/templates/detailed.tpl
+++ b/node_modules/vsc-leetcode-cli/templates/detailed.tpl
@@ -5,7 +5,8 @@ ${comment.line} [${fid}] ${name}
 ${comment.line}
 ${comment.line} ${link}
 ${comment.line}
-${comment.line} ${category}
+${comment.line} category: ${category}
+${comment.line} tags: ${tags}
 ${comment.line} ${level} (${percent}%)
 ${comment.line} Likes:    ${likes}
 ${comment.line} Dislikes: ${dislikes}
@@ -16,6 +17,10 @@ ${comment.line}
 {{ desc.forEach(function(x) { }}${comment.line} ${x}
 {{ }) }}${comment.end}
 
+${extra_pre}
+
 ${comment.singleLine} @lc code=start
 ${code}
 ${comment.singleLine} @lc code=end
+
+${extra_post}
